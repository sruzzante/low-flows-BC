strip.placement = "outside",
legend.position="bottom",
legend.justification = c(1,0),
legend.background = element_rect(colour = "black")
)+
facet_wrap(facets = "regime",ncol = 1,strip.position = "right",
labeller = function(variable, value){return(paste(value,"Regimes"))})+
guides(fill = guide_legend(title = "Scenario (30-year mean)", title.position = "top", title.hjust = 0.1,order = 2),
linetype = guide_legend(title = "", title.position = "left",order = 1 ))
View(DAT3.long)
install.packages("colorblindcheck")
mypal<-c("#DF9C41","#599D7A","#B2E3F0","#FCF4D9")
library(colorblindcheck)
palette_check(mypal, plot = TRUE)
palette_dist(mypal)
palette.colors(4)
palette_check(palette.colors(4), plot = TRUE)
palette_dist(mypal)
palette_check(mypal, plot = TRUE)
setwd(paste0(Sys.getenv("USERPROFILE"), "/OneDrive - University of Victoria/low-flows-BC/")) #Set the working directory
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
lm_fl_list<-list.files(path = "2.data/2.working/RegressionOptimization/BestModels/",pattern = "step2_lm.*rds")
lapply(list.files(path = ".",pattern = "step2_lm.*rds"),readRDS)
# lm1<-readRDS("../low-flows-WNA/2.data/2.working/RegressionOptimization/BestModels/step2_lm_08HA010.rds")
test_dat<-expand.grid(shiftedMonth = 1:12,
Month=1:12,
Total.Precip..mm.=0,
Mean.Temp..C. = 0)
test_dat_P<-test_dat
test_dat_P[test_dat_P$shiftedMonth==test_dat_P$Month,"Total.Precip..mm."]<-10
test_dat_T<-test_dat
test_dat_T[test_dat_T$shiftedMonth==test_dat_T$Month,"Mean.Temp..C."]<-1
it_mn<-12
dataYearly_testP<-test_dat_P%>%
group_by(shiftedMonth)%>%
dplyr::summarize(
# winterPrecip = sum(Total.Precip..mm.[Month%in%c(11,12,1,2,3,4)],na.rm = TRUE),
#                meanWinterTemp =mean(Mean.Temp..C.[Month%in%c(11,12,1,2,3,4)],na.rm = TRUE),
Precip_1 = sum(Total.Precip..mm.[Month%in%c(it_mn)],na.rm = TRUE),
Precip_2 = sum(Total.Precip..mm.[Month%in%((((it_mn-1):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_3 = sum(Total.Precip..mm.[Month%in%((((it_mn-2):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_4 = sum(Total.Precip..mm.[Month%in%((((it_mn-3):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_6 = sum(Total.Precip..mm.[Month%in%((((it_mn-5):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_8 = sum(Total.Precip..mm.[Month%in%((((it_mn-7):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_12 = sum(Total.Precip..mm.[Month%in%((((it_mn-11):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_1 = mean(Mean.Temp..C.[Month%in%c(it_mn)],na.rm = TRUE),
Temp_2 = mean(Mean.Temp..C.[Month%in%((((it_mn-1):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_3 = mean(Mean.Temp..C.[Month%in%((((it_mn-2):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_4 = mean(Mean.Temp..C.[Month%in%((((it_mn-3):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_6 = mean(Mean.Temp..C.[Month%in%((((it_mn-5):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_8 = mean(Mean.Temp..C.[Month%in%((((it_mn-7):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_12 = mean(Mean.Temp..C.[Month%in%((((it_mn-11):it_mn)-1)%%12+1)],na.rm = TRUE),
Total.cms = 0
)
dataYearly_testT<-test_dat_T%>%
group_by(shiftedMonth)%>%
dplyr::summarize(
# winterPrecip = sum(Total.Precip..mm.[Month%in%c(11,12,1,2,3,4)],na.rm = TRUE),
#                meanWinterTemp =mean(Mean.Temp..C.[Month%in%c(11,12,1,2,3,4)],na.rm = TRUE),
Precip_1 = sum(Total.Precip..mm.[Month%in%c(it_mn)],na.rm = TRUE),
Precip_2 = sum(Total.Precip..mm.[Month%in%((((it_mn-1):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_3 = sum(Total.Precip..mm.[Month%in%((((it_mn-2):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_4 = sum(Total.Precip..mm.[Month%in%((((it_mn-3):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_6 = sum(Total.Precip..mm.[Month%in%((((it_mn-5):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_8 = sum(Total.Precip..mm.[Month%in%((((it_mn-7):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_12 = sum(Total.Precip..mm.[Month%in%((((it_mn-11):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_1 = mean(Mean.Temp..C.[Month%in%c(it_mn)],na.rm = TRUE),
Temp_2 = mean(Mean.Temp..C.[Month%in%((((it_mn-1):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_3 = mean(Mean.Temp..C.[Month%in%((((it_mn-2):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_4 = mean(Mean.Temp..C.[Month%in%((((it_mn-3):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_6 = mean(Mean.Temp..C.[Month%in%((((it_mn-5):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_8 = mean(Mean.Temp..C.[Month%in%((((it_mn-7):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_12 = mean(Mean.Temp..C.[Month%in%((((it_mn-11):it_mn)-1)%%12+1)],na.rm = TRUE),
Total.cms = 0
)
dataYearly_testT$lag<-12-dataYearly_testT$shiftedMonth
dataYearly_testP$lag<-12-dataYearly_testP$shiftedMonth
dataYearly_testT<-dataYearly_testT[order(dataYearly_testT$lag),]
dataYearly_testP<-dataYearly_testP[order(dataYearly_testP$lag),]
T_shift<-data.frame()
P_shift<-data.frame()
for(it_stn in 1:230){
BestModels<-readRDS(paste0("2.data/2.working/RegressionOptimization/BestModels/step2_lm_",
stations$ID[it_stn],
".rds"))
month_rng<-((lapply(BestModels,is.null)%>%unlist())==FALSE)%>%which()
for(it in month_rng){
lm_mnth<-BestModels[[it]]
T_shift<-rbind(T_shift,
data.frame(ID = stations$ID[it_stn],
Month = it,
t(predict(lm_mnth,newdata = dataYearly_testT)-lm_mnth$coefficients[1])
# *
#   (24*3600)/(stations$Area_km2[it_stn]*10^6)*1000 # convert to mm/d
)
)
P_shift<-rbind(P_shift,
data.frame(ID = stations$ID[it_stn],
Month = it,
t(predict(lm_mnth,newdata = dataYearly_testP)-lm_mnth$coefficients[1])
# (24*3600)/(stations$Area_km2[it_stn]*10^6)*1000 # convert to mm/d
)
)
}
}
P_shift<-left_join(P_shift,stations[,c("ID","regime","minSumFlowMonth")])
T_shift<-left_join(T_shift,stations[,c("ID","regime","minSumFlowMonth")])
P_shift_long<-pivot_longer(P_shift,cols = X1:X12)
P_shift_long$lag<-(P_shift_long$name%>%str_remove("X")%>%as.numeric())-1
T_shift_long<-pivot_longer(T_shift,cols = X1:X12)
T_shift_long$lag<-(T_shift_long$name%>%str_remove("X")%>%as.numeric())-1
P_shift_summary<-
P_shift_long%>%
# filter(Month==minSumFlowMonth)%>%
group_by(lag,regime)%>%
dplyr::reframe(meanShift = exp(mean(value)-1),
medianShift = median(exp(value)-1),
qnts10 = quantile(exp(value)-1,.10),
qnts25 = quantile(exp(value)-1,.25),
qnts50 = quantile(exp(value)-1,.50),
qnts75 = quantile(exp(value)-1,.75),
qnts90 = quantile(exp(value)-1,.90))
T_shift_summary<-
T_shift_long%>%
# filter(Month==minSumFlowMonth)%>%
group_by(lag,regime)%>%
dplyr::reframe(meanShift = exp(mean(value))-1,
medianShift = median(exp(value)-1),
qnts10 = quantile(exp(value)-1,.10),
qnts25 = quantile(exp(value)-1,.25),
qnts50 = quantile(exp(value)-1,.50),
qnts75 = quantile(exp(value)-1,.75),
qnts90 = quantile(exp(value)-1,.90)
)
shift_summary<-rbind(P_shift_summary%>%mutate(shiftedVar = "P"),
T_shift_summary%>%mutate(shiftedVar = "T")
)
shift_summary$shiftedVar<-factor(shift_summary$shiftedVar,
levels = c("P","T"),
labels = c("P effect (+10 mm)",
"T effect (+1Â°C)"))
shift_summary$regime<-factor(shift_summary$regime,levels = c("Rainfall","Hybrid","Snowfall","Glacial"),
labels = c("Rainfall","Hybrid","Snowmelt","Glacial"))
ggplot(shift_summary,aes(x = lag,y = qnts50*100,ymin = qnts10*100,ymax = qnts90*100 ))+
geom_ribbon(aes(fill = "10th-90th\npercentile"),alpha =0.5)+
geom_line(aes(linetype = "median"),linewidth = 1)+
scale_fill_manual(name = "", values = "pink")+
scale_linetype_manual(name = "", values = 1)+
scale_y_continuous(name = expression(Delta~Q7[min]~"(%)"))+
scale_x_continuous(name = "Lag (months)",
breaks = seq(0,11,4))+
facet_grid(cols = vars(regime),rows = vars(shiftedVar),scales = "free_y")+
theme_bw()+
theme(legend.title = element_blank(),
panel.grid.minor = element_blank())
ggsave("3.figures/RegressionModelPT.png",width = 6,height = 3)
ggsave("3.figures/RegressionModelPT.svg",width = 6,height = 3)
closeAllConnections()
rm(list=ls())
graphics.off()
library(dplyr)
library(sf)
library(tmap)
# library(lmSupport)
library(car)
library(lubridate)
library(ggplot2)
# library(bcdata)
library(bcmaps)
library(stringr)
library(terra)
library(cowplot)
library(scico)
library(scales)
library(tictoc)
setwd(paste0(Sys.getenv("USERPROFILE"), "/OneDrive - University of Victoria/low-flows-BC/")) #Set the working directory
stations<-readRDS("2.data/2.working/StationMetadata/stations_final.RDS")
streamDataAll<-readRDS("2.data/2.working/Discharge/streamDataFinal.rds")
streamDataMonthly<-readRDS("2.data/2.working/Discharge/streamDataMonthly.RDS")
watersheds<-st_read("2.data/2.working/CatchmentPolygons/watersheds_final.gpkg")
WeatherData<-readRDS("2.data/2.working/WeatherDataANUSPLIN/dataMonthly.RDS")
# load("2.data/2.working/RegressionOptimization/RegressionOptimization_step2.RData")
Div<-lapply(paste0("2.data/2.working/WaterUse/estimates/",stations$ID,".csv"),
read.csv)
for(it in 1:nrow(stations)){
Div[[it]]$ID<-stations$ID[it]
}
Div<-Div%>%
bind_rows()
Div<-Div[,c("ID","year","Total.cms","August.cms","September.cms","October.cms")]
WeatherData<-left_join(WeatherData,Div,by = c("ID","Year"= "year"))
pcic_models<-list.files("2.data/1.original/PCIC_station_hydro_model_out/",pattern = ".ascii")%>%str_remove(".ascii")
pcic_models[!(tolower(pcic_models)%in%tolower(stations$Station.Name))]
pcic_models<-pcic_models[tolower(pcic_models)%in%tolower(stations$Station.Name)]
findMin<-function(x){
minInd<-which.min(x)
if(length(minInd)==0){minInd = 1}
return(minInd)}
DAT<-data.frame()
tic.clear()
stations$senSlope<-NA
stations$MK.p<-NA
# it_stn = 79
for(it_stn in 1:length(stations$ID)){
tic(sprintf("Station %d",it_stn))
# it_stn = which(stations$ID=="08HA003")
streamData<-streamDataAll[streamDataAll$ID==stations$ID[it_stn],]
# streamData<-streamDataAll[streamDataAll$ID=="08LB020",]
# streamData$Date<-streamData$Date%>%ymd()
data_x<-WeatherData%>%filter(ID==stations$ID[it_stn])
MonBestModel<-readRDS(paste0("2.data/2.working/RegressionOptimization/BestModels/step2_lm_",stations$ID[it_stn],".rds"))
month_bgn<-max(stations$minSumFlowMonth[it_stn]-1,stations$SDD[it_stn])
if(is.null(MonBestModel[[month_bgn]])){
month_bgn = month_bgn+1
}
month_end<-min(stations$minSumFlowMonth[it_stn]+1,stations$SAD[it_stn])
if(length(MonBestModel)<month_end){
month_end = month_end-1
}
# month_end<-min(month_end,length(MonBestModel))
month_rng<-((month_bgn:month_end)-1)%%12+1
streamDataYrly<-streamDataMonthly%>%
filter(ID==stations$ID[it_stn]&
month%in%month_rng)%>%
group_by(year)%>%
dplyr::summarize(minSumFlow = min(minMonFlow7))
streamData$DayOfYear<-yday(ymd(streamData$Date))
streamData$Discharge7Summer<-streamData$Discharge7
streamData$Discharge7Summer[!streamData$month%in%c(8,9,10)]<-NA
Q_filled<-streamData[streamData$year%in%(1950:2022),c("year","month","DayOfYear","Discharge7")]
Q_filled$DayOfYear[leap_year(Q_filled$year)& Q_filled$DayOfYear>59]<-
Q_filled$DayOfYear[leap_year(Q_filled$year)& Q_filled$DayOfYear>59]-1
set.seed(123)
for(it in 1:365){
sum_notNA<-sum(!is.na(Q_filled$Discharge7)&Q_filled$DayOfYear==it)
if(sum_notNA>0){
sum_NA<-sum(is.na(Q_filled$Discharge7)&Q_filled$DayOfYear==it)
Q_filled$Discharge7[is.na(Q_filled$Discharge7)&Q_filled$DayOfYear==it]<-
sample(Q_filled$Discharge7[!is.na(Q_filled$Discharge7)&Q_filled$DayOfYear==it],size = sum_NA,replace = TRUE)
}
}
if(sum(is.na(Q_filled$Discharge7))>0){
sprintf("%d of 365 days with no filled Q for station %s - %s",sum(is.na(Q_filled$Discharge7[1:365])),stations$ID[it_stn],stations$Station.Name[it_stn])
}
anon_func<-function(MAD,N){MAD[N<365]<-NA; MAD}
MAD<-
Q_filled%>%
group_by(year)%>%
dplyr::summarise(N=n(),
MAD = mean(Discharge7))%>%
mutate(MAD=anon_func(MAD,N))%>%
dplyr::summarise(LTMAD = mean(MAD,na.rm = TRUE))
if(stations$regime[it_stn]=="Rainfall"){
CEFT = 0.02*MAD$LTMAD
}else{
CEFT = 0.05*MAD$LTMAD
}
DroughtIndics<-
streamDataYrly%>%
filter(year%in%(1950:2022))%>%
dplyr::summarise(D5 = quantile(minSumFlow,0.02,type = 5,na.rm = TRUE),
D4 = quantile(minSumFlow,0.05,type = 5,na.rm = TRUE),
D3 = quantile(minSumFlow,0.10,type = 5,na.rm = TRUE))
# DroughtIndic5 = xtrm_val_data%>%
#   filter(month %in%month_rng)%>%
#   group_by(month)%>%
#   summarize(D5 =  quantile(minFlow,0.02,type =5))
# DroughtIndic5<-left_join(data.frame(month = 1:12),
#                          DroughtIndic5)
# One drought level for whole season
# quantile(Q_filled$Discharge7,0.02,type =5,na.rm =TRUE)
# DroughtIndic5_Aug = quantile(log(xtrm_val_data$minAugFlow7),0.02,type =5,na.rm =TRUE)%>%exp()
# DroughtIndic5_Sep = quantile(log(xtrm_val_data$minSepFlow7),0.02,type =5,na.rm =TRUE)%>%exp()
# DroughtIndic5_Oct = quantile(log(xtrm_val_data$minOctFlow7),0.02,type =5,na.rm =TRUE)%>%exp()
# #
# MAD = mean(Q_filled$Discharge7,na.rm = TRUE)
#
# FlowStandardSalmon = (148*MAD^-0.36)*MAD/100
#
predMin<-list()
for(it_mn in month_rng){
# streamDataYrly<-streamDataMonthly%>%
#   filter(month==it_mn&ID==stations$ID[it_stn])
data_x$WaterYear<-data_x$Year
if(it_mn<12){
data_x$WaterYear[data_x$Month%in%c((it_mn+1):12)] <- data_x$WaterYear[data_x$Month%in%c((it_mn+1):12)]+1
}
# print("here-2")
dataYearly<-data_x%>%
group_by(WaterYear)%>%
dplyr::summarize(
# winterPrecip = sum(Total.Precip..mm.[Month%in%c(11,12,1,2,3,4)],na.rm = TRUE),
#                meanWinterTemp =mean(Mean.Temp..C.[Month%in%c(11,12,1,2,3,4)],na.rm = TRUE),
Precip_1 = sum(Total.Precip..mm.[Month%in%c(it_mn)],na.rm = TRUE),
Precip_2 = sum(Total.Precip..mm.[Month%in%((((it_mn-1):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_3 = sum(Total.Precip..mm.[Month%in%((((it_mn-2):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_4 = sum(Total.Precip..mm.[Month%in%((((it_mn-3):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_6 = sum(Total.Precip..mm.[Month%in%((((it_mn-5):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_8 = sum(Total.Precip..mm.[Month%in%((((it_mn-7):it_mn)-1)%%12+1)],na.rm = TRUE),
Precip_12 = sum(Total.Precip..mm.[Month%in%((((it_mn-11):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_1 = mean(Mean.Temp..C.[Month%in%c(it_mn)],na.rm = TRUE),
Temp_2 = mean(Mean.Temp..C.[Month%in%((((it_mn-1):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_3 = mean(Mean.Temp..C.[Month%in%((((it_mn-2):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_4 = mean(Mean.Temp..C.[Month%in%((((it_mn-3):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_6 = mean(Mean.Temp..C.[Month%in%((((it_mn-5):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_8 = mean(Mean.Temp..C.[Month%in%((((it_mn-7):it_mn)-1)%%12+1)],na.rm = TRUE),
Temp_12 = mean(Mean.Temp..C.[Month%in%((((it_mn-11):it_mn)-1)%%12+1)],na.rm = TRUE),
Total.cms = Total.cms[n()]
)
dataYearly<-dataYearly[!is.na(dataYearly$Precip_1)&
!is.na(dataYearly$Temp_1),]
dataYearly<-dataYearly[dataYearly$WaterYear%in%1901:2022,]
#dataYearly$Temp_1<-residuals(lm(Temp_1~Precip_1,data = dataYearly))
#dataYearly$Temp_2<-residuals(lm(Temp_2~Precip_2,data = dataYearly))
#dataYearly$Temp_3<-residuals(lm(Temp_3~Precip_3,data = dataYearly))
#dataYearly$Temp_4<-residuals(lm(Temp_4~Precip_4,data = dataYearly))
#dataYearly$Temp_6<-residuals(lm(Temp_6~Precip_6,data = dataYearly))
#dataYearly$Temp_8<-residuals(lm(Temp_8~Precip_8,data = dataYearly))
#dataYearly$Temp_12<-residuals(lm(Temp_12~Precip_12,data = dataYearly))
# dataYearly2<-left_join(dataYearly,streamDataYrly,by = c("WaterYear"= "year"))
# dataYearly2<-dataYearly2[dataYearly2$WaterYear<2023,]
#
#
#
# dataYearly2<-dataYearly2[dataYearly2$WaterYear>=1901,]
#
#
#
# dataYearly2<-dataYearly2[!is.na(dataYearly2$minMonFlow7)&
#                            !is.na(dataYearly2$Precip_1)&
#                            !is.na(dataYearly2$Temp_1),]
# dataYearly2<-dataYearly2[!is.na(dataYearly2$minSumFlow),]
# if(nrow(dataYearly2)<20){print(it_mn);next}
# Fit the model to all the data
# dataYearly2_trX<-dataYearly2
# MonBestModel_fitted[[it_mn]]<-eval(MonBestModel[[it_mn]][[1]])
predMin[[it_mn]]<-predict(MonBestModel[[it_mn]],newdata = dataYearly)
}
predMin2<-as.data.frame(predMin[month_rng])%>%
apply(1,min)
dat<-data.frame(ID = stations$ID[it_stn],
Station.Name = stations$Station.Name[it_stn],
WaterYear =1901:2022,
predMin = predMin2,
D5 = DroughtIndics$D5,
D4 = DroughtIndics$D4,
D3 = DroughtIndics$D3,
CEFT = CEFT
)
dat$predMin.m3s<-exp(dat$predMin)
DAT<-rbind(DAT,dat)
resids<-left_join(streamDataYrly[,c("year","minSumFlow")],dat[,c("WaterYear","predMin.m3s")],
by = c("year" = "WaterYear"))
mkTest<-modifiedmk::mmkh3lag((resids$minSumFlow-resids$predMin.m3s))
stations$senSlope[it_stn] <-mkTest[7]
stations$MK.p[it_stn] <-mkTest[2]
if(is.na(mkTest[[2]])){
print("For some reason the modifiedmk::mmkh3lag function is encountering an error - defaulting to uncorrected p-value")
stations$MK.p[it_stn] <-mkTest[5]
}
# naInds<-which(is.na(streamDataYrly$minSumFlow))
# naInds<-naInds[!naInds%in%c(1,dim(streamDataYrly)[1])]
# streamDataYrly$minSumFlow_filled<-streamDataYrly$minSumFlow
# if(length(naInds)>0){
#   streamDataYrly$minSumFlow_filled[naInds]<-
#     (streamDataYrly$minSumFlow_filled[naInds+1]+
#        streamDataYrly$minSumFlow_filled[naInds-1])/2
#
# }
# streamDataYrly$minSumFlow.10<-zoo::rollmean(streamDataYrly$minSumFlow_filled,
#                                             k=10,
#                                             align = "right",
#                                             fill = NA)
#
# dat$predMin.m3s.10<-zoo::rollmean(dat$predMin.m3s,
#                                   k=10,
#                                   align = "right",
#                                   fill = NA)
streamDataYrly<-full_join(data.frame(year = (streamDataYrly$year[1]-9):(streamDataYrly$year[1]-1)),
streamDataYrly)
dat<-full_join(data.frame(WaterYear = (dat$WaterYear[1]-9):(dat$WaterYear[1]-1)),
dat)
dat$predMin.m3s.10<-RcppRoll::roll_meanr(dat$predMin.m3s,
n=10,
na.rm = TRUE,
fill = NA)
dat$predMin.m3s.10.n<-RcppRoll::roll_sumr(is.na(dat$predMin.m3s),
n=10,
na.rm = TRUE,
fill = NA)
dat$predMin.m3s.10[dat$predMin.m3s.10.n>5]<-NA
streamDataYrly$minSumFlow.10<-RcppRoll::roll_meanr(streamDataYrly$minSumFlow,
n=10,
na.rm = TRUE,
fill = NA)
streamDataYrly$minSumFlow.10.n<-RcppRoll::roll_sumr(is.na(streamDataYrly$minSumFlow),
n=10,
na.rm = TRUE,
fill = NA)
streamDataYrly$minSumFlow.10[streamDataYrly$minSumFlow.10.n>5]<-NA
streamDataYrly$minSumFlow.10[is.na(streamDataYrly$minSumFlow)]<-NA
# rolled<-RcppRoll::roll_meanr(dat$predMin.m3s,
#                              n=10,
#                              na.rm = TRUE,
#                              fill = NA)
# dat$predMin.m3s.10.n[is.na(dat$predMin.m3s.10)]<-l
# dat$predMin.m3s.10[is.na(dat$predMin.m3s.10)]<-
#   rolled[is.na(dat$predMin.m3s.10)]
#
# rolled2<-RcppRoll::roll_meanr(streamDataYrly$minSumFlow,
#                               n=l,
#                               # align = "right",
#                               fill = NA)
# streamDataYrly$minSumFlow.10.n[is.na(streamDataYrly$minSumFlow.10)]<-l
# streamDataYrly$minSumFlow.10[is.na(streamDataYrly$minSumFlow.10)]<-
#   rolled2[is.na(streamDataYrly$minSumFlow.10)]
# Threshes<-dat%>%
#   select(WaterYear,CEFT,D3,D4,D5)%>%
#   melt(id.vars = "WaterYear")
#
# Threshes$Thresh<-factor(Threshes$variable,levels = c("CEFT","D3","D4","D5"),
#                         labels = c("Critical Environmental\nFlow Threshold","Drought Level 3","Drought Level 4","Drought Level 5"))
if(mean(streamDataYrly$minSumFlow.10[(nrow(streamDataYrly)-20):nrow(streamDataYrly)],na.rm = TRUE)>
(min(streamDataYrly$minSumFlow.10,na.rm = TRUE)+max(streamDataYrly$minSumFlow.10,na.rm = TRUE))/2){
leg.y = 0.15
}else{
leg.y = 0.8
}
if(FALSE){
p1<-ggplot(streamDataYrly)+
# geom_line(aes(x = year,y = minSumFlow.10,colour = "measured",linetype = "measured"))+
# geom_line(data = dat,aes(x = WaterYear,y = predMin.m3s.10,colour = "predicted",linetype = "predicted"))+
geom_line(aes(x = year,y = minSumFlow.10,colour = "measured",group = "measured",alpha = 10-minSumFlow.10.n))+
geom_line(data = dat,aes(x = WaterYear,y = predMin.m3s.10,colour = "predicted",group = "predicted",alpha = 10-predMin.m3s.10.n))+
# geom_hline(aes(yintercept = CEFT,colour = "CEFT",linetype = "CEFT"))+
# geom_hline(data = Threshes,aes(yintercept=value,color = Thresh,linetype = Thresh))+
# geom_hline(aes(yintercept = (DroughtIndics%>%melt())$value,colour = "Drought 5",linetype = "Drought 5"))+
# scale_y_continuous(name = expression(Q7[min]~(m^3/s)~10~year~mean))+
scale_y_continuous(name = expression(Q7[min]~(m^3/s)))+
scale_x_continuous(limits = c(range(streamDataYrly$year[!is.na(streamDataYrly$minSumFlow.10)])))+
scale_alpha_continuous(limits = c(5,10),breaks = c(5,10),
labels = function(x){10-x},range = c(0.1,1),
guide = "alpha")+
scale_colour_manual(breaks = c("measured","predicted","Critical Environmental\nFlow Threshold","Drought Level 3","Drought Level 4","Drought Level 5"),
values = c("black","#1B9E77","black","#E0A758","#D34D4C","#7D3737"),
name = "")+
# scale_linetype_manual(breaks = c("measured","predicted","Critical Environmental\nFlow Threshold","Drought Level 3","Drought Level 4","Drought Level 5"),
#                       values = c(1,1,2,2,2,2),
#                       name = "")+
ggtitle(label = paste(stations$Station.Name[it_stn],", ", stations$ID[it_stn],", ", stations$regime[it_stn]," regime"))+
theme_bw()+
theme(plot.title = element_text(hjust=0.03, vjust=-8,size = 8),
legend.position = c(0.8,leg.y),
legend.background = element_rect(fill = alpha("white",alpha = 0.5),color = "black"),
# legend.title = element_blank()
legend.box = 'horizontal'
)+
guides(alpha = guide_legend(title = "# missing",order = 2),
colour = guide_legend(title = "10-year mean",order = 1),
linetype = guide_legend(title =  "10-year mean",order = 1))
p1
ggsave(plot = p1,filename = paste0("3.Figures/SimulatedHistorical/",stations$ID[it_stn], "-",stations$Station.Name[it_stn],".png"),
width = 6,height = 4)
if(stations$Station.Name[it_stn]%in%pcic_models){
PCIC_model<-read.csv(paste0("2.data/1.original/PCIC_station_hydro_model_out/",stations$Station.Name[it_stn],".ascii"),skip = 1)
PCIC_model$Date<-ymd(PCIC_model$Date)
PCIC_model$month = month(PCIC_model$Date)
PCIC_model$year = year(PCIC_model$Date)
PCIC_model$Discharge<-PCIC_model$PNWNAmet
PCIC_model$Discharge7<-RcppRoll::roll_meanr (PCIC_model$PNWNAmet,n=7,fill = NA)
PCIC_model$Discharge7Summer<-PCIC_model$Discharge7
PCIC_model$Discharge7Summer[!PCIC_model$month%in%month_rng]<-NA
PCIC_modelYrly<-PCIC_model%>%
filter(year%in%(1946:2012))%>%
group_by(year)%>%
dplyr::summarize(
minSumFlow = min(Discharge7Summer,na.rm = TRUE)
)
PCIC_modelYrly<-full_join(data.frame(year = (PCIC_modelYrly$year[1]-9):(PCIC_modelYrly$year[1]-1)),
PCIC_modelYrly)
PCIC_modelYrly$minSumFlow.10<-RcppRoll::roll_meanr(PCIC_modelYrly$minSumFlow,
n=10,
na.rm = TRUE,
fill = NA)
PCIC_modelYrly$minSumFlow.10.n<-RcppRoll::roll_sumr(is.na(PCIC_modelYrly$minSumFlow),
n=10,
na.rm = TRUE,
fill = NA)
PCIC_modelYrly$minSumFlow.10[PCIC_modelYrly$minSumFlow.10.n>5]<-NA
PCIC_modelYrly$minSumFlow.10[is.na(PCIC_modelYrly$minSumFlow)]<-NA
p2<-p1+geom_line(data = PCIC_modelYrly,aes(x = year,y = minSumFlow.10,colour = "VIC-GL",group = "measured",alpha = 10-minSumFlow.10.n))+
scale_colour_manual(breaks = c("measured","predicted","VIC-GL"),
labels = c("measured","regression","VIC-GL"),
values = c("black","#1B9E77","#D95F02"),
name = "")+
theme(
# legend.position = c(0.8,(5*leg.y+0.5)/6),
legend.position = "right",
legend.box = 'vertical',
legend.title = element_text(hjust=0.5)
)+
guides(colour = guide_legend(title = "10-year\nmean\nlow flow",order = 1))
p2
ggsave(plot = p2,filename = paste0("3.Figures/SimulatedHistorical/PCIC_compare/",stations$ID[it_stn], "-",stations$Station.Name[it_stn],".png"),
width = 6,height = 4)
}
}
toc()
}
